#!/home/local/bin/runawk -f /home/jim/dev/shell/library.awk

# based on sample code at http://cm.bell-labs.com/cm/cs/who/bwk/awkcode.txt


# Usage:   paste [-s] [-d delimiters] file ...
#          merge corresponding or subsequent lines
# Author:  Jim Pryor <dubiousjim@gmail.com>
# Version: 1
# 
# Options:
#  -d delimiters  used as circular list         <== accepts \n \t \\ \0 is empty string (not \000), other \c ~~> c
#             -s  fill rows first
#
# Shorter files are extended with empty lines.  <== except when -s
# '-' specifies stdin, which is read circularly.
#                                               <== additional issues:
#                                                   on FreeBSD, `paste -s ...` won't end with \n if input file didn't end with one
#                                                   but in awk, I don't know how to detect the lack of a terminal \n
# This script is in the public domain, free from copyrights or restrictions.


# EXAMPLES
# List the files in the current directory in three columns:
#       ls | paste - - -

# Combine pairs of lines from a file into single lines:
#       paste -s -d '\t\n' myfile

# Number the lines in a file, similar to nl(1):
#       sed = myfile | paste -s -d '\t\n' - -

# Create a colon-separated list of directories named bin:
#       find / -name bin -type d | paste -s -d : -

BEGIN {
    usage("paste", 1, "merge corresponding or subsequent lines", "[-s] [-d delimiters] file...",
          "-d delimiters  used as circular list\n           -s  fill rows first",
          "Shorter files are extended with empty lines. '-' specifies stdin, which is read circularly.",
          "d:s", options, 1)
    if ("d" in options) {
        nd = 0
        k = length(options["d"])
        for (i=1; i<=k; i++) {
            j = substr(options["d"], i, 1)
            if (j == "\\") {
                j = j substr(options["d"], ++i, 1)
            }
            if (j == "\\0")
                j = ""
            else if (j == "\\n")
                j = "\n"
            else if (j == "\\t")
                j = "\t"
            else if (j ~ /^\\./)
                j = substr(j, 2, 1)
            d[nd++] = j # this array is 0-based
        }
    } else {
        nd = 1
        d[0] = "\t"
    }
    first_stdin = 0
    nin = 0
    for (i=1; i<ARGC; i++)
        if (ARGV[i] == "-") {
            if (first_stdin)
                ARGV[i] = ""
            else
                first_stdin = i
            inargs[i] = ++nin # this array is associative
        } else if (ARGV[i] == "")
            die("empty filename")
        else if (ARGV[i] ~ /^[^/].*=/)
            ARGV[i] = "./" ARGV[i]
    # vars: d[0..nd-1], first_stdin, inargs[..], nin, lines[ARGIND, j], nlines,        i, j, k
}

function getd(i) { return (i==1) ? "" : d[(i-2) % nd] }

function divup(m, n) { return int((m+n-1) / n) }

{ lines[ARGIND, FNR] = $0; lines[ARGIND, 0] = FNR }

END {
    if (EXITCODE) exit EXITCODE
    if ("s" in options) {
        for (i=1; i<ARGC; i++)
            if ((i, 0) in lines) {
                for (j=1; j<=lines[i,0]; j++)
                    printf "%s%s", getd(j), lines[i, j]
                print "" # omit if ARGV[i] didn't end with \n?
            }
    } else {
        nlines = 0
        for (i=1; i<ARGC; i++) {
            if (i == first_stdin)
                k = divup(lines[i, 0], nin)
            else
                k = lines[i, 0]
            if (k > nlines)
                nlines = k
        }
        k = 0
        for (j=1; j<=nlines; j++) {
            for (i=1; i<ARGC; i++)
                if (i in inargs)
                    printf "%s%s", getd(i), lines[first_stdin, ++k]
                else
                    printf "%s%s", getd(i), lines[i, j]
            print ""
        }
    }
}

